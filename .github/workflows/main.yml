name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean

jobs:
  build_rust_cli:
    name: Build Rust CLI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: cli-linux
            asset_name: cli-linux-amd64
          - os: windows-latest
            artifact_name: cli-windows.exe
            asset_name: cli-windows-amd64
          - os: macos-latest
            artifact_name: cli-macos
            asset_name: cli-macos-amd64

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build CLI
        run: cargo build --release
        working-directory: ./cli
      
      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/release/netter.exe ./${{ matrix.artifact_name }}
          else
            cp target/release/netter ./${{ matrix.artifact_name }}
          fi
        working-directory: ./cli
      
      - name: Upload CLI artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ./cli/${{ matrix.artifact_name }}
          if-no-files-found: error

  build_qt_gui:
    name: Build Qt GUI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt_version: ['6.5.0']
        include:
          - os: ubuntu-latest
            artifact_name: gui-linux
            asset_name: gui-linux-amd64
          - os: windows-latest
            artifact_name: gui-windows
            asset_name: gui-windows-amd64
          - os: macos-latest
            artifact_name: gui-macos
            asset_name: gui-macos-amd64

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          host: ${{ matrix.os }}
          target: desktop
          arch: gcc_64
          install-deps: true
          
      - name: Create build directory
        run: mkdir build
        working-directory: ./gui
      
      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake .. -DCMAKE_BUILD_TYPE=Release
        working-directory: ./gui/build
        
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
        working-directory: ./gui/build
        
      - name: Build GUI
        run: cmake --build . --config Release
        working-directory: ./gui/build
      
      - name: Deploy Qt dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p deploy/${{ matrix.artifact_name }}
          cp build/netterui deploy/${{ matrix.artifact_name }}/
          ${{ env.Qt6_DIR }}/bin/windeployqt deploy/${{ matrix.artifact_name }}/your_gui_name
        working-directory: ./gui
        
      - name: Deploy Qt dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p deploy/${{ matrix.artifact_name }}
          cp build/Release/netterui.exe deploy/${{ matrix.artifact_name }}/
          ${{ env.Qt6_DIR }}/bin/windeployqt deploy/${{ matrix.artifact_name }}/your_gui_name.exe
        working-directory: ./gui
        
      - name: Deploy Qt dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p deploy/${{ matrix.artifact_name }}
          cp -R build/netterui.app deploy/${{ matrix.artifact_name }}/
          ${{ env.Qt6_DIR }}/bin/macdeployqt deploy/${{ matrix.artifact_name }}/your_gui_name.app -dmg
        working-directory: ./gui
      
      - name: Upload GUI artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ./gui/deploy/${{ matrix.artifact_name }}
          if-no-files-found: error

  test:
    name: Run Tests
    needs: [build_rust_cli, build_qt_gui]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      
      - name: Run CLI tests
        run: cargo test
        working-directory: ./cli

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.release == 'true'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      
      - name: Create archives
        run: |
          cd ./artifacts
          for dir in */; do
            platform=${dir%/}
            if [[ "$platform" == *"windows"* ]]; then
              7z a -tzip "${platform}.zip" "./${platform}/"*
            else
              tar -czvf "${platform}.tar.gz" -C "./${platform}" .
            fi
          done
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/*.zip
            ./artifacts/*.tar.gz
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
