name: Build Netter

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  build-rust-cli:
    name: Build Rust CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: netter.exe
            asset_name: netter-windows.zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: netter
            asset_name: netter-linux.tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.RUST_VERSION }}
        target: ${{ matrix.target }}
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build CLI
      run: cargo build --release
    
    - name: Run tests
      run: cargo test --release
    
    - name: Package CLI binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p release
        cp target/release/${{ matrix.binary_name }} release/
        cd release
        7z a ../${{ matrix.asset_name }} ${{ matrix.binary_name }}
        cd ..
    
    - name: Package CLI binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p release
        cp target/release/${{ matrix.binary_name }} release/
        cd release
        tar -czf ../${{ matrix.asset_name }} ${{ matrix.binary_name }}
        cd ..
    
    - name: Upload binary as artifact
      uses: actions/upload-artifact@v3
      with:
        name: netter-cli-${{ matrix.os }}
        path: ${{ matrix.asset_name }}

  build-qt-gui:
    name: Build Qt GUI
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-cmake
          mingw-w64-ucrt-x86_64-make
          mingw-w64-ucrt-x86_64-qt6-base
          mingw-w64-ucrt-x86_64-qt6-tools
          mingw-w64-ucrt-x86_64-qt6-declarative
          mingw-w64-ucrt-x86_64-qt6-svg
    
    - name: Create build directory
      shell: msys2 {0}
      run: |
        mkdir -p build
        cd build
        echo "Build directory created"
    
    - name: Configure CMake
      shell: msys2 {0}
      run: |
        cd build
        cmake -G "MSYS Makefiles" .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DMSYS2_INSTALL_DIR=/ucrt64
    
    - name: Build
      shell: msys2 {0}
      run: |
        cd build
        make -j$(nproc)
    
    - name: Create deployment package
      shell: msys2 {0}
      run: |
        mkdir -p packages/NetterUI
        cp build/bin/NetterUI.exe packages/NetterUI/
        cp build/run_netter_ui.bat packages/NetterUI/
        
        # Copy all DLLs from build/bin to packages/NetterUI
        cp -r build/bin/*.dll packages/NetterUI/
        
        # Copy platform plugins
        mkdir -p packages/NetterUI/platforms
        mkdir -p packages/NetterUI/styles
        mkdir -p packages/NetterUI/imageformats
        
        cp -r build/bin/platforms/* packages/NetterUI/platforms/ || true
        cp -r build/bin/styles/* packages/NetterUI/styles/ || true
        cp -r build/bin/imageformats/* packages/NetterUI/imageformats/ || true
        
        cd packages
        7z a -tzip ../NetterUI-windows.zip NetterUI
    
    - name: Upload Qt GUI artifact
      uses: actions/upload-artifact@v3
      with:
        name: netter-gui-windows
        path: NetterUI-windows.zip

  build-full-package:
    name: Create full package
    runs-on: windows-latest
    needs: [build-rust-cli, build-qt-gui]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Extract all artifacts
      shell: powershell
      run: |
        mkdir -p netter-full-package
        
        # Extract CLI
        7z x artifacts/netter-cli-windows-latest/netter-windows.zip -onetter-full-package/
        
        # Extract GUI
        7z x artifacts/netter-gui-windows/NetterUI-windows.zip -onetter-full-package/
        
        cd netter-full-package
        
        # Create launcher script
        @"
        @echo off
        chcp 65001 > nul
        echo Starting Netter...
        start "" "NetterUI/NetterUI.exe"
        "@ | Out-File -FilePath "launch-netter.bat" -Encoding ASCII
        
        cd ..
        7z a netter-full-package-windows.zip netter-full-package/*
    
    - name: Upload full package
      uses: actions/upload-artifact@v3
      with:
        name: netter-full-package-windows
        path: netter-full-package-windows.zip
    
    - name: Create release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          netter-full-package-windows.zip
          artifacts/netter-cli-windows-latest/netter-windows.zip
          artifacts/netter-cli-ubuntu-latest/netter-linux.tar.gz
          artifacts/netter-gui-windows/NetterUI-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
