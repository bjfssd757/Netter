name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Версия релиза (без "v" в начале)'
        required: true
        default: '0.3.2'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="v$VERSION"
            if ! gh release view "$TAG_NAME" &>/dev/null; then
              gh release create "$TAG_NAME" --title "NetterUI $TAG_NAME" --generate-notes
            else
              echo "Release $TAG_NAME already exists"
            fi
          else
            gh release create ${{ github.ref_name }} --title "NetterUI ${{ github.ref_name }}" --generate-notes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build Windows (PowerShell + MSYS2)
    needs: create-release
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Modify Cargo.toml to disable AWS-LC ASM
        shell: pwsh
        run: |
          # Временно изменяем Cargo.toml для отключения ассемблера в aws-lc-sys
          if (Test-Path "Cargo.toml") {
            $content = Get-Content -Path "Cargo.toml" -Raw
            
            # Добавляем секцию [patch.crates-io]
            if ($content -notmatch "\[patch.crates-io\]") {
              $content += @"
          
          [patch.crates-io]
          aws-lc-sys = { version = "0.28.1", features = ["no-asm"] }
          "@
            } else {
              # Если секция уже есть, добавляем только aws-lc-sys
              $content = $content -replace "\[patch.crates-io\]", "[patch.crates-io]`naws-lc-sys = { version = `"0.28.1`", features = [`"no-asm`"] }"
            }
            
            Set-Content -Path "Cargo.toml" -Value $content
            Write-Host "Modified Cargo.toml to disable AWS-LC ASM"
            
            # Выводим для отладки
            Get-Content -Path "Cargo.toml" | Select-String -Pattern "patch.crates-io" -Context 0,5
          } else {
            Write-Host "Cargo.toml not found in current directory!"
            Get-ChildItem -Recurse -Path "." -Filter "Cargo.toml" | ForEach-Object { 
              Write-Host "Found Cargo.toml at $($_.FullName)" 
            }
          }
      
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-qt6-base
            mingw-w64-ucrt-x86_64-qt6-tools
            mingw-w64-ucrt-x86_64-qt6-svg
            mingw-w64-ucrt-x86_64-postgresql
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-nsis
      
      - name: Install Rust (windows-gnu)
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-pc-windows-gnu
      
      - name: Build Rust Backend
        shell: pwsh
        run: |
          # Настраиваем пути и переменные для MSYS2/UCRT64
          $env:PATH = "C:\msys64\ucrt64\bin;C:\msys64\usr\bin;$env:PATH"
          $env:LIBPQ_DIR = "C:\msys64\ucrt64"
          
          # Отключаем использование сборки nasm в aws-lc-sys
          $env:AWS_LC_SYS_NO_ASM = "1"
          
          # Собираем с явным указанием цели для windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu -v
      
      - name: Build Qt UI with CMake
        shell: msys2 {0}
        run: |
          export PATH="/ucrt64/bin:$PATH"
          mkdir -p build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ..
          cmake --build .
      
      # Остальная часть workflow остается без изменений
      
      - name: Create Portable Package
        shell: pwsh
        run: |
          mkdir -p NetterUI-Windows-Portable/bin
          
          # Копируем Rust backend
          Copy-Item "target/x86_64-pc-windows-gnu/release/netter.exe" -Destination "NetterUI-Windows-Portable/bin/" -ErrorAction SilentlyContinue
          
          # Копируем Qt frontend
          Copy-Item "build/bin/NetterUI.exe" -Destination "NetterUI-Windows-Portable/bin/" -ErrorAction SilentlyContinue
          
          $msys2_bin = "C:/msys64/ucrt64/bin"
          
          # PostgreSQL библиотеки
          Copy-Item "$msys2_bin/libpq.dll" -Destination "NetterUI-Windows-Portable/bin/"
          Copy-Item "$msys2_bin/libcrypto*.dll" -Destination "NetterUI-Windows-Portable/bin/" -ErrorAction SilentlyContinue
          Copy-Item "$msys2_bin/libssl*.dll" -Destination "NetterUI-Windows-Portable/bin/" -ErrorAction SilentlyContinue
          
          # MinGW Runtime
          Copy-Item "$msys2_bin/libgcc_s_seh-1.dll" -Destination "NetterUI-Windows-Portable/bin/"
          Copy-Item "$msys2_bin/libstdc++-6.dll" -Destination "NetterUI-Windows-Portable/bin/"
          Copy-Item "$msys2_bin/libwinpthread-1.dll" -Destination "NetterUI-Windows-Portable/bin/"
          
          # Дополнительные библиотеки из CMakeLists.txt
          foreach ($lib in @("zlib1.dll", "libbz2-1.dll", "libpng16-16.dll", "libharfbuzz-0.dll", "libfreetype-6.dll", "libiconv-2.dll")) {
              if (Test-Path "$msys2_bin/$lib") {
                  Copy-Item "$msys2_bin/$lib" -Destination "NetterUI-Windows-Portable/bin/"
              }
          }
          
          # Qt библиотеки
          Copy-Item "$msys2_bin/Qt6Core.dll" -Destination "NetterUI-Windows-Portable/bin/"
          Copy-Item "$msys2_bin/Qt6Gui.dll" -Destination "NetterUI-Windows-Portable/bin/"
          Copy-Item "$msys2_bin/Qt6Widgets.dll" -Destination "NetterUI-Windows-Portable/bin/"
          
          # Qt плагины
          mkdir -p NetterUI-Windows-Portable/bin/platforms NetterUI-Windows-Portable/bin/styles NetterUI-Windows-Portable/bin/imageformats
          
          $qtPluginsDir = "C:/msys64/ucrt64/share/qt6/plugins"
          if (Test-Path "$qtPluginsDir/platforms/qwindows.dll") {
              Copy-Item "$qtPluginsDir/platforms/qwindows.dll" -Destination "NetterUI-Windows-Portable/bin/platforms/"
          }
          
          if (Test-Path "$qtPluginsDir/styles/qwindowsvistastyle.dll") {
              Copy-Item "$qtPluginsDir/styles/qwindowsvistastyle.dll" -Destination "NetterUI-Windows-Portable/bin/styles/"
          }
          
          foreach ($format in @("qgif", "qico", "qjpeg", "qsvg")) {
              if (Test-Path "$qtPluginsDir/imageformats/$format.dll") {
                  Copy-Item "$qtPluginsDir/imageformats/$format.dll" -Destination "NetterUI-Windows-Portable/bin/imageformats/"
              }
          }
          
          # Создание стартового скрипта
          Set-Content -Path "NetterUI-Windows-Portable/NetterUI.bat" -Value "@echo off`r`nchcp 65001 > nul`r`ncd /d `"%~dp0bin`"`r`nNetterUI.exe`r`n"
          
          # README
          Set-Content -Path "NetterUI-Windows-Portable/README.txt" -Value "NetterUI v${{ needs.create-release.outputs.version }}`r`n`r`nTo start the application, run NetterUI.bat`r`n"
          
          # Создание архива
          Compress-Archive -Path "NetterUI-Windows-Portable/*" -DestinationPath "NetterUI-Windows-Portable.zip"
      
      - name: Create Installer with CPack
        shell: msys2 {0}
        run: |
          cd build
          cpack -G NSIS -C Release
      
      - name: Upload Artifacts
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $tag_name = "v${{ github.event.inputs.version }}"
          } else {
            $tag_name = "${{ github.ref_name }}"
          }
          gh release upload $tag_name NetterUI-Windows-Portable.zip --clobber
          gh release upload $tag_name build/NetterUI-*.exe --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Секция для Linux остается без изменений
  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libpq-dev
          sudo apt-get install -y qt6-base-dev libqt6widgets6 libqt6gui6 libqt6core6
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build Rust Backend
        run: |
          # Отключаем использование сборки nasm в aws-lc-sys
          export AWS_LC_SYS_NO_ASM=1
          
          cargo build --release
      
      - name: Build Qt UI (Direct Compilation)
        run: |
          mkdir -p linux_bin
          
          find src/client -name "*.cpp" > cpp_files.txt
          
          g++ -o linux_bin/NetterUI $(cat cpp_files.txt) -std=c++17 -O2 $(pkg-config --cflags --libs Qt6Widgets)
      
      - name: Create AppImage
        run: |
          sudo apt-get install -y libfuse2
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
          
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          
          cp target/release/netter AppDir/usr/bin/
          cp linux_bin/NetterUI AppDir/usr/bin/
          
          cat > AppDir/usr/share/applications/netterui.desktop << EOF
          [Desktop Entry]
          Name=NetterUI
          Exec=NetterUI
          Icon=netterui
          Type=Application
          Categories=Development;Network;
          Comment=Netter - tool for easily starting web servers
          EOF
          
          ./linuxdeploy-x86_64.AppImage --appdir=AppDir --executable=AppDir/usr/bin/NetterUI
          ./linuxdeploy-plugin-qt-x86_64.AppImage --appdir=AppDir
          ./linuxdeploy-x86_64.AppImage --appdir=AppDir --output appimage
      
      - name: Create Portable Package
        run: |
          mkdir -p NetterUI-Linux-Portable/bin
          cp target/release/netter NetterUI-Linux-Portable/bin/
          cp linux_bin/NetterUI NetterUI-Linux-Portable/bin/
          
          cat > NetterUI-Linux-Portable/run_netterui.sh << EOF
          #!/bin/bash
          cd "\$(dirname "\$0")/bin"
          ./NetterUI
          EOF
          
          chmod +x NetterUI-Linux-Portable/run_netterui.sh
          
          cat > NetterUI-Linux-Portable/README.txt << EOF
          NetterUI v${{ needs.create-release.outputs.version }}
          
          To start the application, run ./run_netterui.sh
          
          Dependencies:
          - Qt6 (libqt6widgets6, libqt6gui6, libqt6core6)
          - PostgreSQL client (libpq5)
          EOF
          
          tar -czf NetterUI-Linux-Portable.tar.gz NetterUI-Linux-Portable
      
      - name: Create DEB Package
        run: |
          sudo apt-get install -y dpkg-dev
          
          mkdir -p netterui_pkg/DEBIAN
          mkdir -p netterui_pkg/usr/bin
          mkdir -p netterui_pkg/usr/share/applications
          mkdir -p netterui_pkg/usr/share/icons/hicolor/256x256/apps
          
          cp target/release/netter netterui_pkg/usr/bin/
          cp linux_bin/NetterUI netterui_pkg/usr/bin/
          
          cat > netterui_pkg/usr/share/applications/netterui.desktop << EOF
          [Desktop Entry]
          Name=NetterUI
          Exec=/usr/bin/NetterUI
          Icon=netterui
          Type=Application
          Categories=Development;Network;
          Comment=Netter - tool for easily starting web servers
          EOF
          
          cat > netterui_pkg/DEBIAN/control << EOF
          Package: netterui
          Version: ${{ needs.create-release.outputs.version }}
          Section: devel
          Priority: optional
          Architecture: amd64
          Depends: libqt6widgets6, libqt6gui6, libqt6core6, libpq5
          Maintainer: NetterUI Team
          Description: Netter - tool for easily starting web servers
           NetterUI provides a graphical interface for managing web servers.
          EOF
          
          dpkg-deb --build netterui_pkg
          mv netterui_pkg.deb netterui_${{ needs.create-release.outputs.version }}_amd64.deb
      
      - name: Upload Artifacts
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag_name="v${{ github.event.inputs.version }}"
          else
            tag_name="${{ github.ref_name }}"
          fi
          gh release upload $tag_name NetterUI-*.AppImage --clobber
          gh release upload $tag_name NetterUI-Linux-Portable.tar.gz --clobber
          gh release upload $tag_name netterui_${{ needs.create-release.outputs.version }}_amd64.deb --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
